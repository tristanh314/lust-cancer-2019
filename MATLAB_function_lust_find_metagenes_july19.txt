function [kompg,overlaps] = lust_find_metagenes( rids_file, exp_file, dens, conftol )
% This version finds metagenes from the large expression file.
% The groups are ranked using a graph density objective function,
% and overlaps listed.
% Input:  rids of genes, expression file, density, conftol
%   dens is the desired density of +1,-1
%   conftol is the confidence parameter
% There are also some internal parameters For merging the groups
% which are hard-wired below

     rids=importdata(rids_file);
     dataJ=importdata(exp_file);

%% internal parameters
noruns=1; %2 %%no. of passes of merging overlapping groups
overlapsupp=2;  %%min size of overlap
overlappercent=.6; %.5;  %%min percentage of overlap
% Min size group to keep when tossing small ones 
gpminsize=7; %6; %5;
% Min support for X -> Y
minsupp=2;  
%% No. of regulators kept for each group
%nokept=5;
%% no. G sub X to recalculate and graph
%topno = 10;  

%sizes
mn1=size(dataJ);
m1=mn1(1);
n=mn1(2);   

%fix density
[ d1 express ] = density_fix( dataJ, dens );
d1
% be sure it works!!


%preliminaries

mn=size(express);
m=mn(1);
dominatrix=zeros(m,m);


%%Now look at gene i -> gene j +/-
for i=1:m
 for j=1:m
  if ~(i==j)
     
        sp=0;   %support positive
        dp=0;   %deficit positive
        sn=0;   %support negative
        dn=0;   %deficit negative
        for k=1:n
            if express(i,k)==1
                if express(j,k)==1
                    sp=sp+1;
                else
                    dp=dp+1;
                end
            end
            if express(i,k)==-1
                if express(j,k)==-1
                    sn=sn+1;
                else
                    dn=dn+1;
                end
            end
        end
        
cp=0;  %to cover sp+dp=0
cn=0;  %to cover sn+dn=0
if sp+dp > 0 && sn+dn > 0        
    cp = sp/(sp+dp);    %confidence positive
    cn = sn/(sn+dn);    %confidence negative
if cp >= conftol && cn >= conftol 
    dominatrix(i,j)=1;    
end  % end if sp ...
end  % end if cp ...

  end  %% end if i ne j
  end  %% end j
end  % end i


%%do equivalences
equivs=zeros(m,12);
noequivs=zeros(m,1);
maxequivs=1;
for i=1:m
    equivs(i,1)=i;
    kt=1;
    for j=1:m
        if ~(i == j)
            if dominatrix(i,j)==1 && dominatrix(j,i)==1
                kt=kt+1;
                equivs(i,kt)=j;
            end
        end
    end
    noequivs(i)=kt;
    if kt>maxequivs 
        maxequivs=kt;
    end
end

%%do nonplayer
nonplayers=[];    
kt=0;
for i=1:m
    s=sum(dominatrix(i,:));
    t=sum(dominatrix(:,i));
    if s+t==0
        kt=kt+1;
        nonplayers(kt)=i;
    end
end

%start making groups from equivalence classes
mmnn=size(equivs);
nn=mmnn(2);
groups=zeros(1,nn);   %%will grow to gpsize by nn
nogps = 0;
minsize= 2;
for k=1:m
    if equivs(k,minsize) ~= 0
        nogps = nogps+1;
        groups (nogps,:)=equivs(k,:);
    end
end

%sort groups by size
gpsize=zeros(nogps,1);
for k=1:nogps
    gpsize(k)=noequivs(groups(k,1));
end
%gpsize
temp=[gpsize groups];
temp=sortrows(temp,-1);
gpsize=temp(:,1);
groups=temp(:,2:maxequivs+1);

%group member matrix
gpmember=zeros(nogps,m);
for i=1:nogps
    for j=1:gpsize(i)
        gpmember(i,groups(i,j))=1;
    end
end

for runs=1:noruns  %%twice through cleans up a lot  
%merging
%parameters noruns, overlapsupp, overlappercent set at top
k=1;
while k < nogps
    i=k+1;
   while (k+1 <= i) && (i <= nogps)
       ddot=gpmember(i,:)*gpmember(k,:)';
       percent = ddot/gpsize(i);
       if (ddot >= overlapsupp) && (percent >= overlappercent)
           gpmember(k,:)=min(gpmember(k,:)+gpmember(i,:),1);
           gpsize(k)=gpsize(k)+gpsize(i)-ddot;
           %merge
           ct=0;
           for t=1:m
           if gpmember(k,t)==1
               ct=ct+1;
               groups(k,ct)=t;
           end
           end
           %%delete group "i"
           if i < nogps
               groups=groups([1:i-1,i+1:nogps],:);
               gpmember=gpmember([1:i-1,i+1:nogps],:);
               gpsize=gpsize([1:i-1,i+1:nogps]);
               nogps=nogps-1;
           else  % i = nogps
               groups=groups(1:i-1,:);
               gpmember=gpmember(1:i-1,:);
               gpsize=gpsize(1:i-1);
               nogps=nogps-1;               
           end
       end
   i=i+1;
   end
k=k+1;
end
end  %%end second run

%%Toss small groups
%%parameter gpminsize (min size to keep) set at top
gpkt=0;  %%initialize
for j=1:nogps
    if gpsize(j) >= gpminsize
        gpkt=j;
    end
end
if gpkt==0
    display 'no groups found, try lower conftol'
end
groups=groups(1:gpkt,:);
gpsize=gpsize(1:gpkt,:);
nogps=gpkt;
%%previous version may keep some 3-elt gps; alternate below messes regulates...
%gpkt=1;
%keep(1)=1;
%for j=2:nogps
%    if gpsize(j) >= gpminsize
%        gpkt=gpkt+1;
%        keep(gpkt)=j;
%    end
%end
%groups=groups(keep,:);
%gpsize=gpsize(keep,:);
%nogps=gpkt;
%%%%%%%%%%%%%%%%%%%%%%%%%insert kompkomp %%%%%%%%%%%%%

kompg=zeros(nogps,4);
for j=1:nogps
    kompg(j,1)=j;
    kompg(j,2)=gpsize(j);
    kk=0;
    for k=1:gpsize(j)-1
        for ell=k+1:gpsize(j)
            kk=kk+dominatrix(groups(j,k),groups(j,ell));
            kk=kk+dominatrix(groups(j,ell),groups(j,k));
        end
    end
    kompg(j,3)=kk;
    kk=kk/(gpsize(j)-1);  %%normalization step
    kompg(j,4)=kk;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
%groups
%gpsize
kompg
%nogps
%%%%%%%%%%%the next quickens and omits info never used
nogps=min(nogps,32);
%%%%%%%%%%%%%%overlaps%%%%%%%%%%%%%%%%%%%%%
overlaps=zeros(nogps,nogps);
for ii=1:nogps
    for jj=ii:nogps
        A=groups(ii,1:gpsize(ii));
        B=groups(jj,1:gpsize(jj));
        C=intersect(A,B);
        d=size(C);
        e=d(2);
        overlaps(ii,jj)=e;
    end
end
overlaps

%%%%%%%%%%%%%%pau overlaps%%%%%%%%%%%%%%%%%

for iii=1:nogps    
iii
RR=[];
    for j=1:gpsize(iii)
      RR=[RR rids(groups(iii,j))];
    end
    RR
end

end %endfn







